name: Build iOS App for Device

on:
  workflow_dispatch:
    inputs:
      device_udid:
        description: "Device UDID to include in ad-hoc provisioning (optional)"
        required: false
        type: string

jobs:
  build-ios-device:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Verify secrets
        run: |
          if [ -z "${{ secrets.APPLE_TEAM_ID }}" ]; then
            echo "Error: APPLE_TEAM_ID secret is not set or empty"
            exit 1
          fi
          echo "Team ID is set and has length: ${#TEAM_ID}"
        env:
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-ios

      - name: Install iOS Dependencies
        run: rustup target add aarch64-apple-ios

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install project dependencies
        run: bun install

      # Create a new keychain for iOS code signing
      - name: Setup iOS signing
        id: ios-signing
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_DEVELOPMENT_CERTIFICATE }}
          p12-password: ${{ secrets.IOS_DEVELOPMENT_CERTIFICATE_PASSWORD }}
          keychain-password: ${{ github.run_id }}

      - name: Install provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo -n "${{ secrets.IOS_ADHOC_PROVISIONING_PROFILE }}" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/adhoc.mobileprovision

      # Show current tauri.conf.json
      - name: Show tauri.conf.json
        run: cat src-tauri/tauri.conf.json

      # Add iOS section with developmentTeam
      - name: Add iOS section with developmentTeam
        run: |
          # First check if we need to add iOS section
          if grep -q '"iOS": {' src-tauri/tauri.conf.json; then
            echo "iOS section exists, checking for developmentTeam"
            if grep -q '"developmentTeam"' src-tauri/tauri.conf.json; then
              echo "Updating existing developmentTeam"
              sed -i '' 's/"developmentTeam": "[^"]*"/"developmentTeam": "${{ secrets.APPLE_TEAM_ID }}"/' src-tauri/tauri.conf.json
            else
              echo "Adding developmentTeam to existing iOS section"
              sed -i '' 's/"iOS": {/"iOS": {\n      "developmentTeam": "${{ secrets.APPLE_TEAM_ID }}",/' src-tauri/tauri.conf.json
            fi
          else
            echo "Adding iOS section to bundle"
            sed -i '' '/"bundle": {/,/^  }/ s/"targets": "all",/"targets": "all",\n    "iOS": {\n      "developmentTeam": "${{ secrets.APPLE_TEAM_ID }}"\n    },/' src-tauri/tauri.conf.json
          fi

          # Verify the change
          echo "Updated tauri.conf.json:"
          cat src-tauri/tauri.conf.json

      # Initialize Tauri iOS
      - name: Initialize Tauri iOS
        run: bun run tauri ios init

      # Build using Tauri
      - name: Build iOS app for device
        run: bun run tauri ios build --debug

      # Find and upload the IPA file
      - name: Locate and upload IPA
        run: |
          # First try to find the IPA directly, as Tauri generated one
          IPA_PATH=$(find src-tauri -path "*/build/arm64/*.ipa" -type f | head -n 1)

          if [ -n "$IPA_PATH" ]; then
            echo "Found IPA generated by Tauri at: $IPA_PATH"
            echo "IPA_PATH=$IPA_PATH" >> $GITHUB_ENV
          else
            echo "No IPA directly found, searching for app file to create IPA"
            
            # Find the app file
            APP_PATH=$(find src-tauri -name "*.app" -type d | head -n 1)
            
            if [ -z "$APP_PATH" ]; then
              echo "Error: Could not find any .app file."
              find src-tauri -type d | grep -i "app\|ipa"
              exit 1
            fi
            
            echo "Found app at: $APP_PATH"
            
            # Create a payload directory
            PAYLOAD_DIR=$(mktemp -d)/Payload
            mkdir -p "$PAYLOAD_DIR"
            
            # Copy the app to the payload directory
            cp -R "$APP_PATH" "$PAYLOAD_DIR"
            
            # Create the IPA file
            IPA_NAME=$(basename "$APP_PATH" .app).ipa
            IPA_DIR=$(dirname "$APP_PATH")
            cd $(dirname "$PAYLOAD_DIR")
            zip -r "$IPA_DIR/$IPA_NAME" Payload
            
            echo "Created IPA at: $IPA_DIR/$IPA_NAME"
            echo "IPA_PATH=$IPA_DIR/$IPA_NAME" >> $GITHUB_ENV
          fi

          # Show final path to verify
          echo "Final IPA path: $IPA_PATH"
          ls -la $(dirname "$IPA_PATH")

      # Upload the IPA as an artifact
      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-device-app
          path: ${{ env.IPA_PATH }}
          if-no-files-found: error
